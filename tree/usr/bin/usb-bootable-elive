#!/bin/bash
source /usr/lib/elive-tools/functions
el_make_environment
. gettext.sh
TEXTDOMAIN="usb_bootable_elive"
export TEXTDOMAIN

guitool="/usr/bin/zenity --window-icon=/usr/share/icons/gnome/256x256/apps/logo-elive.png"
url_elive="www.elivecd.org"
cache_dir="$HOME/.cache/$(basename $0)"
TMP_PROGRESS_WORKING_f="${cache_dir}/progress-file-working"
TMP_ERROR_LOGS_f="${cache_dir}/logs-error.txt"
wgetopts="--tries=40 --progress=dot:binary -c"
#set -E

# TODO: add an option for improve the health of the USB (filling it with zeroes, which sometimes are needed, more than we think!, which also guarantees the correct writting)
# TODO: recyclate persistence and other partitions

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    guitool working_stop
    rm -f "$lockfile"
    kill "$pid" 2>/dev/null || kill -9 "$pid" 2>/dev/null || true
    rm -f "$TMP_ERROR_LOGS_f" "$TMP_PROGRESS_WORKING_f"
}
exit_error(){
    guitool working_stop
    rm -f "$lockfile"
    kill "$pid" 2>/dev/null || kill -9 "$pid" 2>/dev/null || true
    if [[ -s "$TMP_ERROR_LOGS_f" ]] ; then
        guitool error "$( eval_gettext "Aborted tool for recording Elive to an USB." )\n\n$(tail -2 "$TMP_ERROR_LOGS_f")"
    else
        guitool error "$( eval_gettext "Aborted tool for recording Elive to an USB." )"
    fi
    guitool info "$( eval_gettext "If there's an issue with the tool we suggest to report it to Elive. You can also try to delete the next directory:" ) $cache_dir"

    rm -f "$TMP_ERROR_LOGS_f" "$TMP_PROGRESS_WORKING_f"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    NOREPORTS=1 el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"

# }}}
# this function generates the menu with the USB device to select
generate_menu_selector(){
    # build menu variable from partitions list {{{
    #  device :: type :: filesystem :: label :: human_label :: size :: human_size :: uuid
    if [[ "$1" = "include_hd" ]] ; then
        regex_matches="^(ID_USB_DRIVER=usb-storage|ID_TYPE=disk)$"
    else
        regex_matches="^(ID_USB_DRIVER=usb-storage)$"
    fi

    unset menu id_vendor
    while read -ru 3 entry
    do
        part="$( echo "$entry" | awk -v FS="::" '{print $1}' )"
        [[ ! -b "$part" ]] && continue
        # ignore partitions (end in numbers)
        if echo "$part" | grep -qs "[[:digit:]]$" ; then
            continue
        fi

        if /sbin/udevadm info --query=property --name="$part" | grep -qsE "$regex_matches" ; then
            # create an array for use in the menu, with one per line
            menu+=("$( echo "$entry" | awk -v FS="::" '{print $1}' )")
            menu+=("$( echo "$entry" | awk -v FS="::" '{print $7}' )")
            id_vendor="$( /sbin/udevadm info --query=property --name="$part" | grep "ID_VENDOR_ID=" | sed -e 's|^.*VENDOR_ID=||g' )"
            id_vendor="$( lsusb | grep "ID ${id_vendor}:" | sed -e "s|^.*${id_vendor}:||g" | awk '{print $2" "$3}' )"
            if [[ -z "$id_vendor" ]] ; then
                id_vendor="$( /sbin/udevadm info --query=property --name="$part" | grep "ID_MODEL=" | sed -e 's|^.*ID_MODEL=||g' | awk '{print $1" "$2}' )"
            fi

            if echo "$entry" | awk -v FS="::" '{print $5}' | grep -qsE "(no name|swap|unformatted)" ; then
                menu+=("$( echo "$entry" | awk -v FS="::" -v id_vendor="$id_vendor" '{print id_vendor}' )")
            else
                menu+=("$( echo "$entry" | awk -v FS="::" -v id_vendor="$id_vendor" '{print id_vendor " - "$5}' )")
            fi
        fi
    done 3<<< "$( partitions-list --show-all --show-disks --show-raw | awk -v FS="::" '{if ($3 != "swap") print $0}' )"
    # }}}
}

#===  FUNCTION  ================================================================
#          NAME:  guitool
#   DESCRIPTION:  small tool for interact with the user graphically
#    PARAMETERS:  $1 = mode, $2 = message, $3 = "%s" equivalent vars for $2
#       RETURNS:  value, if needed
#===============================================================================
guitool(){
    # pre {{{
    local mode message
    #el_debug

    mode="$1"
    message="$2"

    el_check_variables "mode,guitool"

    #el_debug "    $FUNCNAME $@"

    # }}}
    # functions {{{
    # This is not going to work here because gettext is unable to get the messages from a dynamic variable
    #    local _translated_message
    #    _translated_message="$( printf "$( eval_gettext "$message" )" "$@" )"

    case "$mode" in
        info)
            guitool working_stop
            el_check_variables "message"
            $guitool --info --text="$message"

            ;;
        error)
            guitool working_stop
            el_check_variables "message"
            $guitool --error --text="$message"

            ;;
        warning)
            guitool working_stop
            el_check_variables "message"
            $guitool --warning --text="$message"

            ;;
        working_write_progress)
            if ((is_auto_mode)) ; then
                return
            fi

            echo "1" > "$TMP_PROGRESS_WORKING_f"
            sync

            if [[ -n "$message" ]] ; then
                message_doing_magic="$message"
            else
                # random message generator
                message_doing_magic="$( eval_gettext "Elive is doing some magic..." )"
                # random message generator
                case "$( shuf -i 1-5 -n 1 )" in
                    1)
                        message_doing_magic="$( eval_gettext "Elive is doing some magic..." )"
                        ;;
                    2)
                        message_doing_magic="$( eval_gettext "Transferring bytes at the speed of light..." )"
                        ;;
                    3)
                        message_doing_magic="$( eval_gettext "Arranging some atoms in the universe..." )"
                        ;;
                    4)
                        message_doing_magic="$( eval_gettext "Mutating frogs with unicorns..." )"
                        ;;
                    5)
                        message_doing_magic="Dancing 'Staying Elive' by the Bee Gees..."
                        ;;
                esac
            fi

            { ( while test -f "${TMP_PROGRESS_WORKING_f}" ; do cat "$TMP_PROGRESS_WORKING_f" || true ; LC_ALL=C sleep 0.4 ; done | $guitool --progress --text="$message_doing_magic" --auto-close ) & disown ; } 1>/dev/null

            ;;
        working_start)
            if ((is_auto_mode)) ; then
                return
            fi
            # already running? keep it running instead of creating a new one
            if [[ -s "$TMP_PROGRESS_WORKING_f" ]] || ((is_guitool_working_running)) ; then
                return
            fi

            echo working > "$TMP_PROGRESS_WORKING_f"
            sync
            is_guitool_working_running=1


            if [[ -n "$message" ]] ; then
                message_doing_magic="$message"
            else
                # random message generator
                message_doing_magic="$( eval_gettext "Elive is doing some magic..." )"
                # random message generator
                case "$( shuf -i 1-5 -n 1 )" in
                    1)
                        message_doing_magic="$( eval_gettext "Elive is doing some magic..." )"
                        ;;
                    2)
                        message_doing_magic="$( eval_gettext "Transferring bytes at the speed of light..." )"
                        ;;
                    3)
                        message_doing_magic="$( eval_gettext "Arranging some atoms in the universe..." )"
                        ;;
                    4)
                        message_doing_magic="$( eval_gettext "Mutating frogs with unicorns..." )"
                        ;;
                    5)
                        message_doing_magic="Dancing 'Staying Elive' by the Bee Gees..."
                        ;;
                esac
            fi

            { ( while test -s "$TMP_PROGRESS_WORKING_f" ; do echo 10 ; cat "$TMP_PROGRESS_WORKING_f" || true ; sleep 1 ; done | $guitool --progress --text="$message_doing_magic" --pulsate --auto-close ) & disown ; } 2>/dev/null

            ;;
        working_stop)
            if ((is_auto_mode)) ; then
                return
            fi
            rm -f "$TMP_PROGRESS_WORKING_f"
            unset is_guitool_working_running

            ;;
        question)
            guitool working_stop
            el_check_variables "message"

            if $guitool --question --text="$message" ; then
                return 0
            else
                return 1
            fi

            ;;
    esac
    # }}}
}

usage(){
    # options {{{
    echo -e "$(basename $0) can record an ISO/IMG to a USB, compatible with most of images / isos even not Elive ones, the tool is interactive unless:"
    echo -e "\nOptions:"
    echo -e "--auto              Do not ask for USB device, just use the one that you have actually inserted"
    echo -e "--simulate          Simulation mode, does not write real data to the device"
    echo -e "--force             Force writing, required when a persistence partition is found"
    echo -e "elive.iso|img       Use the given image to record"
    # - options }}}
}

main(){
    # pre {{{
    local url_image_stable url_image_beta menu id_vendor


    el_dependencies_check "dd,lynx,wget,zsync"

    for arg in "$@"
    do
        case "$arg" in
            -h|--help)
                echo -e "This tool will record Elive in a USB, automatically downloading the last version and asking for your USB device where to record it."
                echo -e " * if you use the --auto option, the USB is automatically detected and not asked"
                echo -e " * if you give the image as parameter, it will not download it but use the given one"
                echo -e "Example: $(basename $0) --auto elive_2.9.12_beta_usb.img"
                echo -e "Note: this tool can be used to record most of linux distro's in USB too"
                echo -e "Other options: -s for simulate, -f for force writing"
                exit
                ;;
            --auto)
                is_auto_mode=1
                ;;
            *.img|*.IMG|*.iso|*.ISO|*.img.gz|*.IMG.GZ|*.iso.gz|*.ISO.GZ|*.img.bz2|*.IMG.BZ2|*.iso.bz2|*.ISO.BZ2|*.img.xz|*.IMG.XZ|*.iso.xz|*.ISO.XZ|*.img.lzma|*.IMG.LZMA|*.iso.lzma|*.ISO.LMZA)
                image_filename="$arg"

                # verify
                if [[ -s "$image_filename" ]] ; then
                    is_image_given=1
                else
                    el_error "Invalid image given"
                    exit
                fi

                # get the name version
                image_version="$( echo "$image_filename" | sed -e 's|^.*/||g' -e 's|elive_||g' -e 's|_.*$||g' )"
                if ! echo "$image_version" | grep -qs "^[[:digit:]].*[[:digit:]]$" ; then
                    image_version="$( basename "$image_filename" )"
                fi

                # fix paths
                if [[ "$image_filename" != /* ]] ; then
                    image_filename="$(pwd)/$image_filename"
                fi

                # get size
                image_filename_size="$( du -s "$image_filename" | awk '{print $1}' )"
                el_debug "filename size is ${image_filename_size}"
                ;;
            --help)
                usage
                exit
                ;;
            -f|--force)
                is_mode_force=1
                ;;
            -s|--simulate)
                is_mode_simulate=1
                ;;
        esac

        shift
    done

    mkdir -p "$cache_dir"
    cd "$cache_dir"

    # do not run it in the live system
    if grep -qs "boot=live" /proc/cmdline ; then
        guitool error "$( eval_gettext "This tool is made to work under the installed system. Please install Elive in order to use it." )"
        exit
    fi


    if ! ((is_auto_mode)) ; then
        #if ! guitool question "$( eval_gettext "This tool will create an USB bootable media that you can use for boot Elive in any computer, all the data inside the USB is going to be deleted. Do you want to continue?" )" ; then
        if ! guitool question "$( eval_gettext "This tool will record your USB with an ISO or image file, downloading itself the last version of Elive, or you can also use it to record any operating system with it. After that you will be able to boot a computer from this USB." )" ; then
            exit
        fi
    fi

    # }}}

    # select version {{{
    if ! ((is_image_given)) ; then
        if guitool question "$( eval_gettext "Do you have an already downloaded Elive version? Otherwise we will download the last one." )" ; then
            image_filename="$( $guitool --file-selection --filename="$( xdg-user-dir DOWNLOAD )/" --file-filter="*.img *.IMG *.iso *.ISO" || echo cancel )"

            if [[ -s "$image_filename" ]] && ! [[ "$image_filename" = "cancel" ]] && ! [[ -z "$image_filename" ]] ; then
                is_image_given=1
                image_version="$( echo "$image_filename" | sed -e 's|^.*/||g' -e 's|elive_||g' -e 's|_.*$||g' )"
                image_filename_size="$( du -s "$image_filename" | awk '{print $1}' )"
                if ! echo "$image_version" | grep -qs "^[[:digit:]].*[[:digit:]]$" ; then
                    image_version="$( basename "$image_filename" )"
                    guitool info "$( eval_gettext "This doesn't looks like to be a normal Elive version, but we will try to use it anyway." )"
                fi
            else
                unset image_filename
                unset is_image_given
            fi
        fi

        if ! ((is_image_given)) ; then
            # ask for img / iso
            if guitool question "$( eval_gettext "Do you want to use the IMG version? The IMG version can have persistence with encryption, but the ISO version can be compatible with rare hardware." )" ; then
                image_extension="img"
            else
                image_extension="iso"
            fi

            guitool working_stop
            guitool working_start

            image_stable_url="$( lynx -dump "${url_elive}/download/stable/" | grep "${url_elive}/downloads/stable/.*\.${image_extension}" | sed -e 's|^.*www\.|www.|g' | sort -V | tail -1 )"
            read -r image_stable_url <<< "$image_stable_url"
            image_stable_version="${image_stable_url%/*}"
            image_stable_version="${image_stable_version##*/}"
            image_stable_filename="${image_stable_url##*/}"

            # topaz version don't supports USB, or at least from this tool
            if [[ "$image_stable_version" = "2.0" ]] ; then
                unset image_stable_url image_stable_version image_stable_filename
            fi

            image_beta_url="$( lynx -dump "${url_elive}/download/beta/" | grep "${url_elive}/downloads/other/.*\.${image_extension}" | sed -e 's|^.*www\.|www.|g' | sort -V | tail -1 )"
            # no download available from the website (request-donation-mode set?)
            if [[ -z "$image_beta_url" ]] ; then
                image_beta_url="$( lynx -dump "isos.elivecd.org/development/" | grep "/development/elive_.*\.${image_extension}\$" | sed -e 's|^.*http|http|g' | sort -V | tail -1 )"
                #if [[ -z "$image_beta_url" ]] ; then
                    #image_beta_url="$( lynx -dump "isos.elivecd.org/beta/" | grep "/beta/elive_.*\.${image_extension}\$" | sed -e 's|^.*http|http|g' | sort -V | tail -1 )"
                #fi
            fi

            read -r image_beta_url <<< "$image_beta_url"
            image_beta_version="${image_beta_url%/*}"
            image_beta_version="${image_beta_version##*/}"
            image_beta_filename="${image_beta_url##*/}"

            if [[ -n "$image_stable_url" ]] && [[ -n "$image_beta_url" ]] ; then
                # ask version to use
                if guitool question "$( eval_gettext "Do you want to use the last Beta version instead of the Stable one?" )" ; then
                    image_url="$image_beta_url"
                    image_version="$image_beta_version"
                    image_filename="$image_beta_filename"
                    image_subdir="development"
                else
                    image_url="$image_stable_url"
                    image_version="$image_stable_version"
                    image_filename="$image_stable_filename"
                    image_subdir="stable"
                fi

            else
                if [[ -n "$image_beta_url" ]] ; then
                    # only beta available
                    if [[ -z "$image_stable_url" ]] ; then
                        image_url="$image_beta_url"
                        image_version="$image_beta_version"
                        image_filename="$image_beta_filename"
                        image_subdir="development"
                    fi

                    # only stable available
                    if [[ -z "$image_beta_url" ]] ; then
                        image_url="$image_stable_url"
                        image_version="$image_stable_version"
                        image_filename="$image_stable_filename"
                        image_subdir="stable"
                    fi
                fi
            fi

            # checks
            if [[ -z "$image_url" ]] ; then
                #guitool error "$( eval_gettext "No versions of Elive for USB available found from the website." )"
                guitool info "$( eval_gettext "Download manually first the version of Elive that you want to use. Then use it with this tool to record your media with it." )"
                #el_error "no versions found on the website"
                exit 0
            fi

            # get redirector, specially needed for zsync to work
            guitool working_start
            _image_url="$( LC_ALL=C timeout 10 wget --verbose "$image_url" -O /dev/null 2>&1 | grep -i "Location:.*following" | sed -e 's|^Location: ||g' -e 's|\[follow.*$||g' )"
            if [[ "$_image_url" = http* ]] ;  then
                image_url="$_image_url"
                read -r image_url <<< "$image_url"
            fi

        fi
    fi

    # - select version }}}
    # download images {{{
    if ! ((is_image_given)) ; then
        mkdir -p "$cache_dir/downloads/${image_subdir}/${image_extension}"
        cd "$cache_dir/downloads/${image_subdir}/${image_extension}"

        image_md5="${image_filename%.*}.md5"
        rm -f "$image_md5"

        # download the md5
        case "$image_extension" in
            img)
                wget $wgetopts --quiet "${image_url%/*}/${image_filename%.img}.md5"
                ;;
            iso)
                wget $wgetopts --quiet "${image_url%/*}/${image_filename%.iso}.md5"
                ;;
        esac

        if [[ -s "$image_filename" ]] ; then
            # download ready to use
            # TODO: check md5 to know that is valid
            guitool working_start
            if md5sum -c "${image_md5}" ; then
                is_checksum_ok=1
            else
                is_redownload_wanted=1
            fi
            guitool working_stop
        else
            image_old="$( ls -1 *.img 2>/dev/null | sort -V | tail -1 )"

            # re-use with zsync
            if [[ -s "$image_old" ]] ; then
                # use zsync
                rm -rf old
                mkdir -p old
                mv -f elive*${image_extension} old/

                # TODO: test if works with the temporal url
                zsync -i "old/${image_old}" "${image_url}.zsync" 1>"$TMP_PROGRESS_WORKING_f" 2>"$TMP_ERROR_LOGS_f" &
                pid="$!"
                sleep 2

                local message_downloading
                message_downloading="$( printf "$( eval_gettext "Synchronizing to Elive %s, please be patient..." )" "$image_version" )"

                local message_comparing
                message_comparing="$( printf "$( eval_gettext "Searching particles in the universe to recycle, to save you around the 90 percent of the needed download!" )" "" )"


                while kill -0 "$pid" 2>/dev/null
                do
                    progress="$( cat "$TMP_PROGRESS_WORKING_f" | grep % | tail -1 | tr ' ' '\n' | grep % | sed -e 's|%||g' -e 's|\..*$||g' | tail -1 )"
                    if [[ "$progress" = 100 ]] ; then
                        #if ! shuf -i 30-70 -n 1 2>/dev/null ; then
                        #echo "50"
                        #fi
                        echo "# $message_comparing"
                    else
                        #echo "$progress"
                        echo "# ${message_downloading}: ${progress} %"
                    fi
                    sleep 5
                done | $guitool --progress --pulsate --auto-close --text="$( eval_gettext "$message_downloading" )" || exit 1

                # cleanups
                rm -f rcksum-*

                # errors?
                if grep -qs "No space left" "$TMP_ERROR_LOGS_f" "${TMP_PROGRESS_WORKING_f}" ; then
                    guitool error "$( eval_gettext "No space left on device, please free some space on your disk before running this tool again." )"
                    rm -f "$image_filename"
                    cd
                    rm -rf "$cache_dir"
                    exit 1
                fi

                # TODO: add a function to verify signature
                #guitool working_start
                if md5sum -c "${image_md5}" ; then
                    is_checksum_ok=1
                    rm -rf old/
                else
                    guitool error "$( eval_gettext "Integrity verification doesn't match. Please run again this tool to try another download." )"
                    el_error "md5 verification failed"
                    exit 1
                fi
                guitool working_stop
            fi
        fi

        # we don't have it, nor zsynced, download it
        if ! [[ -s "$image_filename" ]] || ((is_redownload_wanted)) ; then
            LC_ALL=C wget $wgetopts "$image_url" 1>"$TMP_PROGRESS_WORKING_f" 2>"$TMP_ERROR_LOGS_f" &
            pid="$!"
            sleep 2

            local message_downloading
            message_downloading="$( printf "$( eval_gettext "Downloading Elive %s, please be patient..." )" "$image_version" )"

            while kill -0 "$pid" 2>/dev/null
            do
                progress="$( cat "$TMP_PROGRESS_WORKING_f" | grep % | tail -1 | tr ' ' '\n' | grep % | sed -e 's|%||g' -e 's|\..*$||g' | tail -1 )"
                echo "$progress"
                sleep 5
            done | $guitool --progress --auto-close --text="$( eval_gettext "$message_downloading" )" || exit 1

            # errors?
            if grep -qs "No space left" "$TMP_ERROR_LOGS_f" "${TMP_PROGRESS_WORKING_f}" ; then
                guitool error "$( eval_gettext "No space left on device, please free some space on your disk before running this tool again." )"
                rm -f "$image_filename"
                cd
                rm -rf "$cache_dir"
                exit 1
            fi

            # TODO:
            guitool working_start
            if md5sum -c "${image_md5}" ; then
                is_checksum_ok=1
            else
                rm -f "$image_filename"
            fi
            guitool working_stop
        fi

        if [[ -s "$image_filename" ]] && ! ((is_checksum_ok)) ; then
            guitool working_start
            if md5sum -c "${image_md5}" ; then
                is_checksum_ok=1
            else
                rm -f "$image_filename"
                guitool error "$( eval_gettext "Integrity verification doesn't match. Please run again this tool to try another download." )"
                el_error "md5 verification failed"
                exit 1
            fi
            guitool working_stop
        fi

        if ! ((is_checksum_ok)) ; then
            guitool error "$( eval_gettext "Integrity not verified correctly." )"
            el_error "integrity has not been verified"
            exit 1
        fi
    fi

        # verify md5
    # - download images }}}
    # select device to record Elive {{{
    generate_menu_selector

    # not inserted ? do it!
    if [[ "${#menu[@]}" -lt 3 ]] ; then
        guitool info "$( eval_gettext "Please insert the desired USB before to continue." )"

        generate_menu_selector
        if [[ "${#menu[@]}" -lt 3 ]] ; then
            sleep 6
            generate_menu_selector
        fi
    fi

    if [[ "${#menu[@]}" -lt 3 ]] ; then
        #guitool error "$( eval_gettext "No USB thumbdrives where found." )"
        if guitool question "$( eval_gettext "No USB thumb drives found. Do you want to include the results of hard disks? (use this option with caution, it can destroy your computer's data if you select the wrong disk)" )" ; then

            generate_menu_selector "include_hd"
            if [[ "${#menu[@]}" -lt 3 ]] ; then
                guitool error "$( eval_gettext "No USB thumbdrives where found." )"
                exit 1
            fi

            is_hd_included=1
        else
            exit 1
        fi
    fi

    if ((is_auto_mode)) ; then
        if [[ "${#menu[@]}" -eq 3 ]] ; then
            if [[ -b "${menu[0]}" ]] ; then
                image_device_size="$( partitions-list --show-disks --show-raw --show-only="${menu[0]}" | awk -v FS="::" '{print $6 }' )"
                if [[ "$image_device_size" -gt 3500000000 ]] && [[ "$image_device_size" -lt 75000000000 ]] ; then
                    image_device="${menu[0]}"
                else
                    el_info "Device '${menu[0]}' named '${menu[2]}' has a size of '${image_device_size}' which is not common in USB sticks, switching to manual mode..."
                fi
            fi
        fi
    fi

    local message_select_usb
    message_select_usb="$( printf "$( eval_gettext "Select the USB device where to record the system. All the data and partitions inside will be permanently deleted!" )" "" )"

    if ! [[ -n "$image_device" ]] || ! [[ -b "$image_device" ]] ; then
        image_device="$( $guitool --list --height=300 --width=600 --text="$message_select_usb" --column="$( eval_gettext "Device" )" --column="$( eval_gettext "Size" )" --column="$( eval_gettext "Details" )" "${menu[@]}" || echo cancel )"

        if [[ "$image_device" = "cancel" ]] || [[ -z "$image_device" ]] || [[ ! -b "$image_device" ]] ; then
            if guitool question "$( eval_gettext "You have not selected any device to use, do you want to exit?" )" ; then
                exit 1
            else
                generate_menu_selector

                image_device="$( $guitool --list --height=300 --width=600 --text="$message_select_usb" --column="$( eval_gettext "Device" )" --column="$( eval_gettext "Size" )" --column="$( eval_gettext "Details" )" "${menu[@]}" || echo cancel )"

                if [[ "$image_device" = "cancel" ]] || [[ -z "$image_device" ]] || [[ ! -b "$image_device" ]] ; then
                    el_error "wrong device selected: $image_device"
                    exit 1
                fi
            fi
        fi
    fi

    # - select device to record Elive }}}

    # record Elive to device {{{
    if [[ -s "$image_filename" ]] && [[ -b "$image_device" ]] ; then
        local message_recording
        message_recording="$( printf "$( eval_gettext "Recording Elive %s to your %s device" )" "$image_version" "$image_device" )"
        if ! echo "$image_version" | grep -qs "^[[:digit:]].*[[:digit:]]$" ; then
            message_recording="$( printf "$( eval_gettext "Recording %s to your %s device" )" "${image_version}" "$image_device" )"
        fi

        # recyclate persistence partition?
        # TODO:
        # ask
        # cryptsetup support, detect too
        buf="$( partitions-list --show-all --show-disks --show-raw | awk -v FS="::" '{if ($3 != "swap") print $0}' | grep "^${image_device}" )"
        if echo "$buf" | grep -qsE "(persistence|crypto_LUKS)" ; then
            if echo "$buf" | grep -qsi "Live_BOOT" ; then
                if echo "$buf" | grep -qsi "Live_OS" ; then
                    persistence_partition="$( partitions-list --show-all 2>/dev/null | grep -E "^${image_device}.*::(persistence|crypto_LUKS)::" | awk -v FS="::" '{print $1}' | tail -1 )"
                    is_persistence_included=1
                fi
            fi
        fi

        if ((is_persistence_included)) ; then
            if ((is_auto_mode)) ; then
                if ! ((is_mode_force)) ; then
                    NOREPORTS=1 el_error "You have a persistence partition included, use with -f to force recording of USB (will delete persistence)"
                    exit 1
                fi
            else
                if ! guitool question "$( eval_gettext "You have a persistence partition included on this USB, if you continue you will lose all the data inside it like your users and files, do you want to continue?" )" ; then
                    exit
                fi
            fi
        fi
        if ((is_auto_mode)) ; then
            el_info "$message_recording"
        else
            guitool working_stop
        fi

        # checks {{{
        if [[ -z "$image_filename_size" ]] ;then
            image_filename_size="$( du -s "$image_filename" | awk '{print $1}' )"
        fi
        if ! [[ -n "$image_filename_size" ]] ; then
            el_error "image given '${image_filename}' has no size?"
            exit 1
        fi
        # }}}

        case "$image_filename" in
            *".gz"|*".GZ")
                command_cat="zcat"
                ;;
            *".bz2"|*".BZ2")
                command_cat="bzcat"
                ;;
            *".lzma"|*".LZMA")
                command_cat="lzcat"
                ;;
            *".xz"|*".XZ")
                command_cat="xzcat"
                ;;
            *)
                command_cat="cat"
                ;;
        esac

        # add a 10% to the real size to never show 100 until we really finished
        image_filename_size="$( echo "scale=0; (${image_filename_size} / 100) * 110" | bc -l )"

        el_debug "Running command: $command_cat \"$image_filename\" | pv -n -W -s \"${image_filename_size}k\" 2>\"${TMP_PROGRESS_WORKING_f}\" | dd of=\"$image_device\" bs=4M "

        # for debug only (with no real writing):
        #if zcat "$image_filename" | pv -n -W -s "${image_filename_size}k" 2>"${TMP_PROGRESS_WORKING_f}" | dd of="/dev/null" bs=4M ; then

        # confirm write
        if ((is_hd_included)) && ! guitool question "$( eval_gettext "You selected to write into a hard disk instead of a USB memory, this is dangerous if you selected the wrong one. Do you want to continue? This disk is going to be entirely erased:" ) ${image_device}" ; then
            exit 1
        fi

        if ((is_mode_simulate)) ; then
            el_info "simulated recording to the disk '${image_device}' "
            for i in $(seq 10)
            do
                echo "${i}0" >> ${TMP_PROGRESS_WORKING_f}
                LC_ALL=C sleep 0.4
            done
        else
            # show gui
            guitool working_write_progress

            # first: erase headers to clean trashy bytes
            echo "1" >> "$TMP_PROGRESS_WORKING_f"
            dd if=/dev/zero of="$image_device" bs=8M count=16  2>/dev/null

            # record the system
            if $command_cat "$image_filename" | pv -n -W -s "${image_filename_size}k" 2>"${TMP_PROGRESS_WORKING_f}" | dd of="$image_device" bs=4M 1>/dev/null 2>&1 ; then
                sync
                echo "100" >> "$TMP_PROGRESS_WORKING_f"
            else
                is_record_failed=1
            fi
            sync
        fi

        guitool working_stop

        # show possible errors found
        if ((is_record_failed)) ; then
            el_error "dd was unable to write"
            guitool error "$( eval_gettext "Error recording USB" ). $( eval_gettext "This can be caused by a bad quality USB or because its too small. Our recommendation for a good quality device is for example the Sandisk Ultra, which is cheap and so fast that can make Persistence working light and responsive." )"
            exit 1
        fi
    fi

    local message_congratulations
    message_congratulations="$( printf "$( eval_gettext "Congratulations, your USB is ready to be used on any computer! Remember that some newer computers requires to disable the UEFI and Secure Boot modes, you can found more info about this on the Elive website." )" "" )"

    if ((is_auto_mode)) ; then
        el_info "$message_congratulations"
    else
        guitool info "$message_congratulations"
    fi

    # }}}
    # delete cache if low space {{{
    free_space="$( LC_ALL=C df -BM | awk '{if ($6 == "/home") print $4}' | sed -e 's|M$||g' | tail -1 )"
    if [[ -z "$free_space" ]] ; then
        free_space="$( LC_ALL=C df -BM | awk '{if ($6 == "/") print $4}' | sed -e 's|M$||g' | tail -1 )"
    fi

    if echo "$free_space" | grep -qs "[[:digit:]]" ; then
        if [[ "$free_space" -lt 40000 ]] ; then
            cd
            rm -rf "$cache_dir"
        fi
    fi

    # - delete images if low space }}}

    # notify
    if ((is_terminal)) ; then
        echo -e "\a"
    fi
}


#
#  MAIN
#
main "$@"


# vim: set foldmethod=marker :


